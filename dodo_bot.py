import telebot
import os
from dotenv import load_dotenv
from utils.api_utils import get_dodo_units, get_lfl_data
from utils.data_utils import  get_user_data, update_user_subscriptions, get_user_subscriptions, \
    update_user_code_verifier, create_user_table # Removed set_user_started and create_new_user
import hashlib
import secrets
import base64
import logging
import schedule
import time
from threading import Thread
import json
from utils.menu_utils import _create_menu_buttons
import urllib.parse


load_dotenv()

logging.basicConfig(level=logging.DEBUG)

bot_token = os.getenv("BOT_TOKEN")
if not bot_token:
    print("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")
    exit()
client_id = os.getenv("CLIENT_ID")
if not client_id:
    print("–û—à–∏–±–∫–∞: client_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")
    exit()
redirect_uri = os.getenv("REDIRECT_URI")
if not redirect_uri:
    print("–û—à–∏–±–∫–∞: redirect_uri –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")
    exit()


bot = telebot.TeleBot(bot_token)
create_user_table()


def generate_pkce_codes():
    code_verifier = secrets.token_urlsafe(100)
    code_challenge = base64.urlsafe_b64encode(hashlib.sha256(code_verifier.encode()).digest()).decode('utf-8').replace('=', '')
    return code_verifier, code_challenge

@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
       user_id = message.chat.id
       user_data = get_user_data(user_id)
       if user_data and "token" in user_data:
           show_main_menu_inline(message)
       else:
            code_verifier, code_challenge = generate_pkce_codes()
            update_user_code_verifier(user_id, code_verifier)
            auth_url = (f"https://auth.dodois.io/connect/authorize"
                   f"?client_id={os.getenv('CLIENT_ID')}"
                   f"&redirect_uri={urllib.parse.quote(os.getenv('REDIRECT_URI'))}"
                   f"&response_type=code"
                   f"&scope=openid profile offline_access"
                   f"&code_challenge={code_challenge}"
                   f"&code_challenge_method=S256"
                    f"&state={message.chat.id}"
                   )
            bot.send_message(message.chat.id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ: {auth_url}")
    except Exception as e:
          bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e} ")

def show_main_menu_inline(message):
    user_data = get_user_data(message.chat.id)
    markup = _create_menu_buttons(user_data)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–ú–µ–Ω—é')
def menu_command(message):
    show_main_menu_inline(message)


@bot.callback_query_handler(func=lambda call: call.data == 'main_menu')
def main_menu_callback(call):
    bot.answer_callback_query(call.id)
    user_id = call.message.chat.id
    user_data = get_user_data(user_id)
    markup = _create_menu_buttons(user_data)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('menu_'))
def handle_menu_callback(call):
   bot.answer_callback_query(call.id)
   menu = call.data.split('_')[1]
   show_submenu(call.message, menu)



def show_submenu(message, menu):
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    user_data = get_user_data(message.chat.id)
    token = user_data["token"] if user_data and "token" in user_data else None
    if menu == 'account':
       if token:
            markup.add(telebot.types.InlineKeyboardButton("üßæ –†–µ–≤–∏–∑–∏–∏", callback_data='command_revisions'))
            markup.add(telebot.types.InlineKeyboardButton("üßÆ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è", callback_data='command_inventory'))
            markup.add(telebot.types.InlineKeyboardButton("üóëÔ∏è –°–ø–∏—Å–∞–Ω–Ω–æ–µ —Å—ã—Ä—å–µ", callback_data='command_write_off'))
            markup.add(telebot.types.InlineKeyboardButton("üö´ –ó–∞–±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data='command_rejected_products'))
            markup.add(telebot.types.InlineKeyboardButton("üçΩÔ∏è –ü–∏—Ç–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞", callback_data='command_staff_food'))
            markup.add(telebot.types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–æ–≤", callback_data='command_order_cancellations'))
            lfl_data, lfl_icon = get_lfl_data(token, get_dodo_units(token)["units"])
            markup.add(telebot.types.InlineKeyboardButton(f"üìà –ü—Ä–æ–¥–∞–∂–∏ {lfl_icon} ({lfl_data})", callback_data='command_sales'))
            markup.add(telebot.types.InlineKeyboardButton("üìâ –†–∞—Å—Ö–æ–¥ —Å—ã—Ä—å—è –∑–∞ –ø–µ—Ä–∏–æ–¥", callback_data='command_raw_material_consumption'))
            markup.add(telebot.types.InlineKeyboardButton("üöö –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å—ã—Ä—å—è", callback_data='command_raw_material_movements'))
            markup.add(telebot.types.InlineKeyboardButton("üì¶ –ü—Ä–∏—Ö–æ–¥—ã —Å—ã—Ä—å—è", callback_data='command_raw_material_receipts'))
            markup.add(telebot.types.InlineKeyboardButton("üì¶ –ü—Ä–∏—Ö–æ–¥—ã —Å—ã—Ä—å—è –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ", callback_data='command_raw_material_receipts_by_delivery'))
            markup.add(telebot.types.InlineKeyboardButton("üöö -> üßæ –ü–æ—Å—Ç–∞–≤–∫–∏ -> –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data='command_delivery_to_receipt'))
            markup.add(telebot.types.InlineKeyboardButton("üóÑÔ∏è –°–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏", callback_data='command_stock_balances'))
       else:
           markup.add(telebot.types.InlineKeyboardButton("üßæ –†–µ–≤–∏–∑–∏–∏", callback_data='command_revisions'))
           markup.add(telebot.types.InlineKeyboardButton("üßÆ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è", callback_data='command_inventory'))
           markup.add(telebot.types.InlineKeyboardButton("üóëÔ∏è –°–ø–∏—Å–∞–Ω–Ω–æ–µ —Å—ã—Ä—å–µ", callback_data='command_write_off'))
           markup.add(telebot.types.InlineKeyboardButton("üö´ –ó–∞–±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data='command_rejected_products'))
           markup.add(telebot.types.InlineKeyboardButton("üçΩÔ∏è –ü–∏—Ç–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞", callback_data='command_staff_food'))
           markup.add(telebot.types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–æ–≤", callback_data='command_order_cancellations'))
           markup.add(telebot.types.InlineKeyboardButton("üìà –ü—Ä–æ–¥–∞–∂–∏", callback_data='command_sales'))
           markup.add(telebot.types.InlineKeyboardButton("üìâ –†–∞—Å—Ö–æ–¥ —Å—ã—Ä—å—è –∑–∞ –ø–µ—Ä–∏–æ–¥", callback_data='command_raw_material_consumption'))
           markup.add(telebot.types.InlineKeyboardButton("üöö –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å—ã—Ä—å—è", callback_data='command_raw_material_movements'))
           markup.add(telebot.types.InlineKeyboardButton("üì¶ –ü—Ä–∏—Ö–æ–¥—ã —Å—ã—Ä—å—è", callback_data='command_raw_material_receipts'))
           markup.add(telebot.types.InlineKeyboardButton("üì¶ –ü—Ä–∏—Ö–æ–¥—ã —Å—ã—Ä—å—è –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ", callback_data='command_raw_material_receipts_by_delivery'))
           markup.add(telebot.types.InlineKeyboardButton("üöö -> üßæ –ü–æ—Å—Ç–∞–≤–∫–∏ -> –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data='command_delivery_to_receipt'))
           markup.add(telebot.types.InlineKeyboardButton("üóÑÔ∏è –°–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏", callback_data='command_stock_balances'))
    elif menu == 'controlling':
       markup.add(telebot.types.InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞", callback_data='command_customer_experience_rating'))
       markup.add(telebot.types.InlineKeyboardButton("‚≠ê –†–µ–π—Ç–∏–Ω–≥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤", callback_data='command_standard_rating'))
       markup.add(telebot.types.InlineKeyboardButton("‚è≥ –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞", callback_data='command_customer_experience_rating_history'))
       markup.add(telebot.types.InlineKeyboardButton("üï∞Ô∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤", callback_data='command_standard_rating_history'))
    elif menu == 'reviews':
        markup.add(telebot.types.InlineKeyboardButton("üìú –ù–µ–¥–∞–≤–Ω–∏–µ –æ—Ç–∑—ã–≤—ã", callback_data='command_recent_reviews'))
        markup.add(telebot.types.InlineKeyboardButton("üíØ –†–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data='command_customer_rating'))
    elif menu == 'delivery':
        markup.add(telebot.types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='command_delivery_statistics'))
        markup.add(telebot.types.InlineKeyboardButton("üßæ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ", callback_data='command_late_delivery_certificates'))
        markup.add(telebot.types.InlineKeyboardButton("üõµ –ó–∞–∫–∞–∑—ã –∫—É—Ä—å–µ—Ä–æ–≤", callback_data='command_courier_orders'))
        markup.add(telebot.types.InlineKeyboardButton("üó∫Ô∏è –°–µ–∫—Ç–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data='command_delivery_sectors'))
        markup.add(telebot.types.InlineKeyboardButton("üõë –°—Ç–æ–ø-–ø—Ä–æ–¥–∞–∂–∏ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º", callback_data='command_stop_sales_by_sectors'))
    elif menu == 'orders':
        markup.add(telebot.types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º", callback_data='command_new_customer_statistics'))
    elif menu == 'units':
        logging.debug(f"–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è show_submenu –¥–ª—è –º–µ–Ω—é units. –¢–æ–∫–µ–Ω {token}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if token:
            units_data = get_dodo_units(token)
            logging.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç get_dodo_units: {units_data}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            if units_data:
                markup.add(telebot.types.InlineKeyboardButton("üîÑ –°–º–µ–Ω—ã –∑–∞–≤–µ–¥–µ–Ω–∏–π", callback_data='command_unit_shifts'))
                markup.add(telebot.types.InlineKeyboardButton("üéØ –¶–µ–ª–∏ –Ω–∞ –º–µ—Å—è—Ü", callback_data='command_monthly_goals'))
        else:
            markup.add(telebot.types.InlineKeyboardButton("üîÑ –°–º–µ–Ω—ã –∑–∞–≤–µ–¥–µ–Ω–∏–π", callback_data='command_unit_shifts'))
            markup.add(telebot.types.InlineKeyboardButton("üéØ –¶–µ–ª–∏ –Ω–∞ –º–µ—Å—è—Ü", callback_data='command_monthly_goals'))
    elif menu == 'team':
        markup.add(telebot.types.InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data='command_employee_list'))
        markup.add(telebot.types.InlineKeyboardButton("üéÅ –ü—Ä–µ–º–∏—è –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–∞—è", callback_data='command_bonus_one_time'))
        markup.add(telebot.types.InlineKeyboardButton("üí∞ –ü—Ä–µ–º–∏—è –∫ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—é –≤ —á–∞—Å", callback_data='command_bonus_hourly_rate'))
        markup.add(telebot.types.InlineKeyboardButton("üéñÔ∏è –ü—Ä–µ–º–∏—è –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∫ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—é –≤ —á–∞—Å", callback_data='command_bonus_position_hourly_rate'))
        markup.add(telebot.types.InlineKeyboardButton("üí∏ –ü—Ä–µ–º–∏–∏", callback_data='command_bonuses'))
        markup.add(telebot.types.InlineKeyboardButton("üíº –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è (–Ω–æ–≤–æ–µ)", callback_data='command_new_rewards'))
        markup.add(telebot.types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data='command_search_employees'))
        markup.add(telebot.types.InlineKeyboardButton("üéÇ –ü–æ–∏—Å–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data='command_search_employee_birthdays'))
        markup.add(telebot.types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ", callback_data='command_employee_info'))
        markup.add(telebot.types.InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π", callback_data='command_manager_contacts'))
        markup.add(telebot.types.InlineKeyboardButton("üîÑ –°–º–µ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–ø–æ –ø–∏—Ü—Ü–µ—Ä–∏—è–º)", callback_data='command_employee_shifts_by_unit'))
        markup.add(telebot.types.InlineKeyboardButton("üÜî –°–º–µ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º)", callback_data='command_employee_shifts_by_id'))
        markup.add(telebot.types.InlineKeyboardButton("üö™ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã", callback_data='command_close_shift'))
        markup.add(telebot.types.InlineKeyboardButton("üõµ –ö—É—Ä—å–µ—Ä—ã –Ω–∞ —Å–º–µ–Ω–µ", callback_data='command_couriers_on_shift'))
        markup.add(telebot.types.InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data='command_schedules'))
        markup.add(telebot.types.InlineKeyboardButton("üìù –†–∞—Å–ø–∏—Å–∞–Ω–∏—è (—Å–æ–∑–¥–∞–Ω–∏–µ)", callback_data='command_create_schedules'))
        markup.add(telebot.types.InlineKeyboardButton("üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏—è: –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏", callback_data='command_schedule_forecast'))
        markup.add(telebot.types.InlineKeyboardButton("üóÇÔ∏è –î–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data='command_employee_positions'))
        markup.add(telebot.types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data='command_employee_position_history'))
        markup.add(telebot.types.InlineKeyboardButton("üó∫Ô∏è –ö–∞—Ä—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π", callback_data='command_opportunity_map'))
        markup.add(telebot.types.InlineKeyboardButton("üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π", callback_data='command_open_vacancies_count'))
        markup.add(telebot.types.InlineKeyboardButton("‚úÖ –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data='command_open_vacancies'))
    elif menu == 'production':
       markup.add(telebot.types.InlineKeyboardButton("‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞", callback_data='command_order_issue_time'))
       markup.add(telebot.types.InlineKeyboardButton("üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å —Ç—Ä–µ–∫–∏–Ω–≥–∞ (–°–≤–æ–¥–Ω—ã–µ)", callback_data='command_tracking_metrics_summary'))
       markup.add(telebot.types.InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤", callback_data='command_order_issue_statistics'))
       markup.add(telebot.types.InlineKeyboardButton("üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data='command_productivity'))
       markup.add(telebot.types.InlineKeyboardButton("üõë –°—Ç–æ–ø-–ø—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º –ø—Ä–æ–¥–∞–∂", callback_data='command_stop_sales_by_channels'))
       markup.add(telebot.types.InlineKeyboardButton("üõë –°—Ç–æ–ø-–ø—Ä–æ–¥–∞–∂–∏ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º", callback_data='command_stop_sales_by_ingredients'))
       markup.add(telebot.types.InlineKeyboardButton("üõë –°—Ç–æ–ø-–ø—Ä–æ–¥–∞–∂–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º", callback_data='command_stop_sales_by_products'))
       markup.add(telebot.types.InlineKeyboardButton("‚öñÔ∏è –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑–∞–º", callback_data='command_unit_load_by_orders'))
       markup.add(telebot.types.InlineKeyboardButton("‚öñÔ∏è –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º", callback_data='command_unit_load_by_products'))
    elif menu == 'finance':
       if token:
           # lfl_data, lfl_icon = get_lfl_data(token, get_dodo_units(token)["units"])
           markup.add(telebot.types.InlineKeyboardButton(f"üìà –í—ã—Ä—É—á–∫–∞", callback_data='command_sales'))
           markup.add(telebot.types.InlineKeyboardButton("‚òÄÔ∏è –î–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º",
                                                         callback_data='command_daily_sales_by_unit'))
           markup.add(telebot.types.InlineKeyboardButton("üåô –ú–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º",
                                                         callback_data='command_monthly_sales_by_unit'))
           markup.add(telebot.types.InlineKeyboardButton("üóìÔ∏è –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º –∑–∞ –ø–µ—Ä–∏–æ–¥",
                                                         callback_data='command_sales_by_unit_for_period'))
       else:
           markup.add(telebot.types.InlineKeyboardButton("üìà –í—ã—Ä—É—á–∫–∞", callback_data='command_sales'))
           markup.add(telebot.types.InlineKeyboardButton("‚òÄÔ∏è –î–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º",
                                                         callback_data='command_daily_sales_by_unit'))
           markup.add(telebot.types.InlineKeyboardButton("üåô –ú–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º",
                                                         callback_data='command_monthly_sales_by_unit'))
           markup.add(telebot.types.InlineKeyboardButton("üóìÔ∏è –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º –∑–∞ –ø–µ—Ä–∏–æ–¥",
                                                         callback_data='command_sales_by_unit_for_period'))
    markup.add(telebot.types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'))
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é {menu}:", reply_markup=markup)



@bot.callback_query_handler(func=lambda call: call.data == 'menu_subscriptions')
def handle_subscriptions_menu(call):
    bot.answer_callback_query(call.id)
    show_subscription_menu(bot, call.message, 'main') # added menu parameter


@bot.callback_query_handler(func=lambda call: call.data.startswith('sub_menu:'))
def sub_menu_callback(call):
    menu = call.data.split(":")[1]
    bot.answer_callback_query(call.id)
    show_subscription_menu(bot, call.message, menu)


@bot.callback_query_handler(func=lambda call: call.data.startswith('sub_report:'))
def sub_report_callback(call):
    report_type = call.data.split(":")[1]
    user_subs = get_user_subscriptions(call.from_user.id)
    if report_type in user_subs:
        user_subs.remove(report_type)
    else:
        user_subs.append(report_type)
    update_user_subscriptions(call.from_user.id, user_subs)
    bot.answer_callback_query(call.id, text=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {report_type} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    menu = call.message.text.split(" ")[4][:-1]
    show_subscription_menu(bot, call.message, menu)


def send_scheduled_reports(bot):
    while True:
        current_time = time.strftime("%H:%M", time.localtime())
        try:
            with open("data/data.json", "r") as file:
                data = json.load(file)
            for user in data:
                if 'schedule_times' in user and "subs" in user:
                    if current_time in user["schedule_times"]:
                        report_types = user["subs"]
                        for report_type in report_types:
                            if report_type == "daily_sales":
                                bot.send_message(user['tg_user_id'], f"–û—Ç—á–µ—Ç –ø–æ –≤—ã—Ä—É—á–∫–µ –æ—Ç {current_time}")
                            elif report_type == "ingredients_stops":
                                bot.send_message(user['tg_user_id'], f"–û—Ç—á–µ—Ç –ø–æ —Å—Ç–æ–ø-–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º –æ—Ç {current_time}")
        except (FileNotFoundError, json.JSONDecodeError):
            pass
        schedule.run_pending()
        time.sleep(60)


def run_scheduler(bot):
    scheduler_thread = Thread(target=send_scheduled_reports, args=(bot,))
    scheduler_thread.daemon = True  # –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ—Ç–æ–∫
    scheduler_thread.start()

def check_user_authorized(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
    user_data = get_user_data(user_id)
    if user_data and "token" in user_data:
       return True
    return False

def show_subscription_menu(bot, message, menu):
    if not check_user_authorized(message.chat.id):
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    user_subs = get_user_subscriptions(message.from_user.id)
    if menu == "main":
      markup.add(telebot.types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—ã—Ä—É—á–∫—É", callback_data='sub_report:daily_sales'))
      markup.add(telebot.types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç–æ–ø—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤", callback_data='sub_report:ingredients_stops'))
    elif menu == "account":
      markup.add(telebot.types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—ã—Ä—É—á–∫—É", callback_data='sub_report:daily_sales'))
      markup.add(telebot.types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç–æ–ø—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤", callback_data='sub_report:ingredients_stops'))
    user_data = get_user_data(message.chat.id)
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –∏–∑ –º–µ–Ω—é {menu}:", reply_markup=markup)


run_scheduler(bot)

bot.polling(none_stop=True)