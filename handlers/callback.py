import telebot

from auth import bot
from utils.api_utils import get_dodo_units, get_daily_sales, get_ingredients_stops, get_kitchen_performance, get_delivery_efficiency, get_cooking_time, get_orders_on_shelf, get_delivery_speed, get_couriers_status, get_delivery_awaiting_time, get_lfl_data
from utils.data_utils import get_user_subscriptions, get_user_data
from utils.menu_utils import _create_menu_buttons
import logging

logging.basicConfig(level=logging.DEBUG)

def check_user_authorized(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
    user_data = get_user_data(user_id)
    if user_data and "token" in user_data:
       return True
    return False


def subs(bot, message, units_data):
    if not check_user_authorized(message.chat.id):
       bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
       return
    if units_data:
        inline_kb = telebot.types.InlineKeyboardMarkup(row_width=2)
        user_subs = get_user_subscriptions(message.from_user.id)
        for unit_name, unit_id in units_data.items():
             is_subscribed = unit_name in user_subs
             text = f"üü¢ {unit_name}" if is_subscribed else f"üî¥ {unit_name}"
             callback_data = f"sub_unit:{unit_id}"
             inline_kb.add(telebot.types.InlineKeyboardButton(text=text, callback_data=callback_data))

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü–µ—Ä–∏–∏:", reply_markup=inline_kb)
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ü—Ü–µ—Ä–∏—è—Ö")

def day_revenue(bot, message, user_units):
  if not check_user_authorized(message.chat.id):
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return
  if not user_units:
    bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∏—Ü—Ü–µ—Ä–∏—è–º")
    return
  token = get_user_data(message.chat.id)['token']
  stroke = '–í—ã—Ä—É—á–∫–∞ | –ù–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥\n'
  for unit in user_units:
        unit_id = unit['id']
        sales_data = get_daily_sales(token, unit_id)
        if sales_data:
            stroke += f"{unit['name']} | {sales_data['revenue']} | {sales_data['revenueChangePercent']}\n"
  bot.send_message(message.chat.id, stroke, disable_notification=True)

def all_stops(bot, message, user_units):
  if not check_user_authorized(message.chat.id):
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return
  if not user_units:
    bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∏—Ü—Ü–µ—Ä–∏—è–º")
    return
  token = get_user_data(message.chat.id)['token']
  for unit in user_units:
      unit_id = unit['id']
      stops_data = get_ingredients_stops(token, unit_id)
      if stops_data and len(stops_data) > 0:
        stroke = f"{unit['name']}\nC—Ç–æ–ø—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:\n\n"
        for el in stops_data:
            stroke += f"{el['productOrIngredientName']} | {el['durationMinutes']} –º–∏–Ω\n"
        bot.send_message(message.chat.id, stroke, disable_notification=True)
      else:
        bot.send_message(message.chat.id, f"{unit['name']}\n–í –¥–∞–Ω–Ω–æ–π –ø–∏—Ü—Ü–µ—Ä–∏–∏ —Å—Ç–æ–ø–æ–≤ –Ω–µ—Ç", disable_notification=True)

def kitchen_performance(bot, message, user_units):
   if not check_user_authorized(message.chat.id):
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return
   if not user_units:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∏—Ü—Ü–µ—Ä–∏—è–º")
        return
   token = get_user_data(message.chat.id)['token']
   stroke = '–í—ã—Ä—É—á–∫–∞ / –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —á–∞—Å\n'
   for unit in user_units:
      unit_id = unit['id']
      kitchen_data = get_kitchen_performance(token, unit_id)
      if kitchen_data:
         stroke += f"{unit['name']} | {kitchen_data['revenue']} | {kitchen_data['productsPerHour']}\n"
   bot.send_message(message.chat.id, stroke, disable_notification=True)

def delivery_performance(bot, message, user_units):
  if not check_user_authorized(message.chat.id):
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return
  if not user_units:
    bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∏—Ü—Ü–µ—Ä–∏—è–º")
    return
  token = get_user_data(message.chat.id)['token']
  stroke = '–ó–∞–∫–∞–∑–æ–≤ –Ω–∞ –∫—É—Ä—å–µ—Ä–∞ | –∑–∞ –ø–æ–µ–∑–¥–∫—É\n'
  for unit in user_units:
    unit_id = unit['id']
    delivery_data = get_delivery_efficiency(token, unit_id)
    if delivery_data:
        stroke += f"{unit['name']} | {delivery_data['ordersPerCourier']} | {delivery_data['ordersPerTrip']}\n"
  bot.send_message(message.chat.id, stroke, disable_notification=True)

def cooking_time(bot, message, user_units):
    if not check_user_authorized(message.chat.id):
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return
    if not user_units:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∏—Ü—Ü–µ—Ä–∏—è–º")
        return
    token = get_user_data(message.chat.id)['token']
    stroke = '–í—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω | –¥–æ—Å—Ç–∞–≤–∫–∞\n'
    for unit in user_units:
      unit_id = unit['id']
      cooking_time_data = get_cooking_time(token, unit_id)
      if cooking_time_data:
         stroke += f"{unit['name']} | {cooking_time_data['restaurant']} | {cooking_time_data['delivery']}\n"
    bot.send_message(message.chat.id, stroke, disable_notification=True)

def awaiting_orders(bot, message, user_units):
   if not check_user_authorized(message.chat.id):
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return
   if not user_units:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∏—Ü—Ü–µ—Ä–∏—è–º")
        return
   token = get_user_data(message.chat.id)['token']
   stroke = '–ó–∞–∫–∞–∑–æ–≤ –Ω–∞ –ø–æ–ª–∫–µ\n'
   for unit in user_units:
      unit_id = unit['id']
      awaiting_orders_data = get_orders_on_shelf(token, unit_id)
      if awaiting_orders_data:
          stroke += f"{unit['name']} | {awaiting_orders_data['value']}\n"
   bot.send_message(message.chat.id, stroke, disable_notification=True)


def delivery_speed(bot, message, user_units):
    if not check_user_authorized(message.chat.id):
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return
    if not user_units:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∏—Ü—Ü–µ—Ä–∏—è–º")
        return
    token = get_user_data(message.chat.id)['token']
    stroke = '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏\n'
    for unit in user_units:
      unit_id = unit['id']
      delivery_speed_data = get_delivery_speed(token, unit_id)
      if delivery_speed_data:
          stroke += f"{unit['name']} | {delivery_speed_data['minutes']}\n"
    bot.send_message(message.chat.id, stroke, disable_notification=True)


def delivery_status(bot, message, user_units):
   if not check_user_authorized(message.chat.id):
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return
   if not user_units:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∏—Ü—Ü–µ—Ä–∏—è–º")
        return
   token = get_user_data(message.chat.id)['token']
   stroke = '–ö—É—Ä—å–µ—Ä–æ–≤ –≤—Å–µ–≥–æ / –≤ –æ—á–µ—Ä–µ–¥–∏\n'
   for unit in user_units:
      unit_id = unit['id']
      courier_status_data = get_couriers_status(token, unit_id)
      if courier_status_data:
         courier_status = courier_status_data['couriers'][0]
         stroke += f"{unit['name']} | {courier_status['total']} / {courier_status['inQueue']}\n"
   bot.send_message(message.chat.id, stroke, disable_notification=True)


def delivery_awaiting_time(bot, message, user_units):
    if not check_user_authorized(message.chat.id):
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return
    if not user_units:
       bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∏—Ü—Ü–µ—Ä–∏—è–º")
       return
    token = get_user_data(message.chat.id)['token']
    stroke = '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏\n'
    for unit in user_units:
      unit_id = unit['id']
      delivery_await_time = get_delivery_awaiting_time(token, unit_id)
      if delivery_await_time and len(delivery_await_time['averageAwaitingTime']) > 0:
          delivery_await_time_data = delivery_await_time['averageAwaitingTime'][0]
          stroke += f"{unit['name']} | {delivery_await_time_data['minutes']}\n"
    bot.send_message(message.chat.id, stroke, disable_notification=True)

def show_subscription_menu(bot, message, menu):
    if not check_user_authorized(message.chat.id):
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    user_subs = get_user_subscriptions(message.from_user.id)
    if menu == "main":
      markup.add(telebot.types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—ã—Ä—É—á–∫—É", callback_data='sub_report:daily_sales'))
      markup.add(telebot.types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç–æ–ø—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤", callback_data='sub_report:ingredients_stops'))
    elif menu == "account":
      markup.add(telebot.types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—ã—Ä—É—á–∫—É", callback_data='sub_report:daily_sales'))
      markup.add(telebot.types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç–æ–ø—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤", callback_data='sub_report:ingredients_stops'))
    user_data = get_user_data(message.chat.id)
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –∏–∑ –º–µ–Ω—é {menu}:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'command_revisions')
def callback_revisions(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≤–∏–∑–∏–π."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
      return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Ä–µ–≤–∏–∑–∏–∏.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_inventory')
def callback_inventory(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_write_off')
def callback_write_off(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Å—ã—Ä—å—è."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
      return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–ø–∏—Å–∞–Ω–Ω–æ–µ —Å—ã—Ä—å–µ.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_rejected_products')
def callback_rejected_products(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∑–∞–±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_staff_food')
def callback_staff_food(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø–∏—Ç–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_order_cancellations')
def callback_order_cancellations(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–æ–≤."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–æ–≤.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_sales')
def callback_sales(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    user_units = get_dodo_units(get_user_data(user_id)['token'])['units']
    day_revenue(bot, call.message, user_units)
@bot.callback_query_handler(func=lambda call: call.data == 'command_raw_material_consumption')
def callback_raw_material_consumption(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ —Å—ã—Ä—å—è –∑–∞ –ø–µ—Ä–∏–æ–¥."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
       return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Ä–∞—Å—Ö–æ–¥ —Å—ã—Ä—å—è –∑–∞ –ø–µ—Ä–∏–æ–¥.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_raw_material_movements')
def callback_raw_material_movements(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å—ã—Ä—å—è."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å—ã—Ä—å—è.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_raw_material_receipts')
def callback_raw_material_receipts(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–æ–≤ —Å—ã—Ä—å—è."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø—Ä–∏—Ö–æ–¥—ã —Å—ã—Ä—å—è.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_raw_material_receipts_by_delivery')
def callback_raw_material_receipts_by_delivery(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–æ–≤ —Å—ã—Ä—å—è –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø—Ä–∏—Ö–æ–¥—ã —Å—ã—Ä—å—è –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_delivery_to_receipt')
def callback_delivery_to_receipt(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å—ã—Ä—å—è."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
      return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å—ã—Ä—å—è ->  –ø–æ—Å—Ç–∞–≤–∫–∏ ->  –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_stock_balances')
def callback_stock_balances(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_customer_experience_rating')
def callback_customer_experience_rating(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
       return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_standard_rating')
def callback_standard_rating(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
       return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_customer_experience_rating_history')
def callback_customer_experience_rating_history(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
       return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_standard_rating_history')
def callback_standard_rating_history(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
      return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_recent_reviews')
def callback_recent_reviews(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ –æ—Ç–∑—ã–≤—ã.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_customer_rating')
def callback_customer_rating(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
       return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–æ–≤.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_delivery_statistics')
def callback_delivery_statistics(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_late_delivery_certificates')
def callback_late_delivery_certificates(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
      return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_courier_orders')
def callback_courier_orders(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–æ–≤."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
       return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∑–∞–∫–∞–∑—ã –∫—É—Ä—å–µ—Ä–æ–≤.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_delivery_sectors')
def callback_delivery_sectors(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ç–æ—Ä–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–µ–∫—Ç–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_stop_sales_by_sectors')
def callback_stop_sales_by_sectors(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–ø-–ø—Ä–æ–¥–∞–∂ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
       return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å—Ç–æ–ø-–ø—Ä–æ–¥–∞–∂–∏ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_new_customer_statistics')
def callback_new_customer_statistics(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –Ω–æ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–æ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_unit_shifts')
def callback_unit_shifts(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ–Ω—ã –∑–∞–≤–µ–¥–µ–Ω–∏–π."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
       return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–º–µ–Ω—ã –∑–∞–≤–µ–¥–µ–Ω–∏–π.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_monthly_goals')
def callback_monthly_goals(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–µ–π –Ω–∞ –º–µ—Å—è—Ü."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Ü–µ–ª–∏ –Ω–∞ –º–µ—Å—è—Ü.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_employee_list')
def callback_employee_list(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
       return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_bonus_one_time')
def callback_bonus_one_time(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º–∏–π."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø—Ä–µ–º–∏—é –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—É—é.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_bonus_hourly_rate')
def callback_bonus_hourly_rate(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º–∏–∏ –∫ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—é –≤ —á–∞—Å."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø—Ä–µ–º–∏—é –∫ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—é –≤ —á–∞—Å.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_bonus_position_hourly_rate')
def callback_bonus_position_hourly_rate(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º–∏–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∫ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—é –≤ —á–∞—Å."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø—Ä–µ–º–∏—é –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∫ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—é –≤ —á–∞—Å.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_bonuses')
def callback_bonuses(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º–∏–π."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
       return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø—Ä–µ–º–∏–∏.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_new_rewards')
def callback_new_rewards(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è (–Ω–æ–≤–æ–µ).")
@bot.callback_query_handler(func=lambda call: call.data == 'command_search_employees')
def callback_search_employees(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_search_employee_birthdays')
def callback_search_employee_birthdays(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø–æ–∏—Å–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_employee_info')
def callback_employee_info(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
       return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_manager_contacts')
def callback_manager_contacts(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_employee_shifts_by_unit')
def callback_employee_shifts_by_unit(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –ø–∏—Ü—Ü–µ—Ä–∏—è–º."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
      return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–º–µ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–ø–æ –ø–∏—Ü—Ü–µ—Ä–∏—è–º).")
@bot.callback_query_handler(func=lambda call: call.data == 'command_employee_shifts_by_id')
def callback_employee_shifts_by_id(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–º–µ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º).")
@bot.callback_query_handler(func=lambda call: call.data == 'command_close_shift')
def callback_close_shift(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_couriers_on_shift')
def callback_couriers_on_shift(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–æ–≤ –Ω–∞ —Å–º–µ–Ω–µ."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∫—É—Ä—å–µ—Ä–æ–≤ –Ω–∞ —Å–º–µ–Ω–µ.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_schedules')
def callback_schedules(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
       return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_create_schedules')
def callback_create_schedules(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_schedule_forecast')
def callback_schedule_forecast(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_employee_positions')
def callback_employee_positions(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
       return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_employee_position_history')
def callback_employee_position_history(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—é –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_opportunity_map')
def callback_opportunity_map(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∫–∞—Ä—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_open_vacancies_count')
def callback_open_vacancies_count(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_open_vacancies')
def callback_open_vacancies(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_order_issue_time')
def callback_order_issue_time(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
      return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤—Ä–µ–º—è –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_tracking_metrics_summary')
def callback_tracking_metrics_summary(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Å —Ç—Ä–µ–∫–∏–Ω–≥–∞."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
       return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å —Ç—Ä–µ–∫–∏–Ω–≥–∞.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_order_issue_statistics')
def callback_order_issue_statistics(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
       return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_productivity')
def callback_productivity(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
       return
    bot.answer_callback_query(call.id)
    user_units = get_dodo_units(get_user_data(user_id)['token'])['units']
    kitchen_performance(bot, call.message, user_units)
@bot.callback_query_handler(func=lambda call: call.data == 'command_stop_sales_by_channels')
def callback_stop_sales_by_channels(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–ø-–ø—Ä–æ–¥–∞–∂ –ø–æ –∫–∞–Ω–∞–ª–∞–º –ø—Ä–æ–¥–∞–∂."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å—Ç–æ–ø-–ø—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º –ø—Ä–æ–¥–∞–∂.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_stop_sales_by_ingredients')
def callback_stop_sales_by_ingredients(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–ø-–ø—Ä–æ–¥–∞–∂ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    user_units = get_dodo_units(get_user_data(user_id)['token'])['units']
    all_stops(bot, call.message, user_units)
@bot.callback_query_handler(func=lambda call: call.data == 'command_stop_sales_by_products')
def callback_stop_sales_by_products(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–ø-–ø—Ä–æ–¥–∞–∂ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
      return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å—Ç–æ–ø-–ø—Ä–æ–¥–∞–∂–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_unit_load_by_orders')
def callback_unit_load_by_orders(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑–∞–º."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑–∞–º.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_unit_load_by_products')
def callback_unit_load_by_products(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
      return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_daily_sales_by_unit')
def callback_daily_sales_by_unit(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
      return
    bot.answer_callback_query(call.id)
    user_units = get_dodo_units(get_user_data(user_id)['token'])['units']
    day_revenue(bot, call.message, user_units)
@bot.callback_query_handler(func=lambda call: call.data == 'command_monthly_sales_by_unit')
def callback_monthly_sales_by_unit(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—è—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
        return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –º–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º.")
@bot.callback_query_handler(func=lambda call: call.data == 'command_sales_by_unit_for_period')
def callback_sales_by_unit_for_period(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º –∑–∞ –ø–µ—Ä–∏–æ–¥."""
    user_id = call.message.chat.id
    if not check_user_authorized(user_id):
      return
    bot.answer_callback_query(call.id)
    bot.send_message(user_id, "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º –∑–∞ –ø–µ—Ä–∏–æ–¥.")

@bot.callback_query_handler(func=lambda call: call.data == 'main_menu')
def main_menu_callback(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'."""
    bot.answer_callback_query(call.id)
    user_id = call.message.chat.id
    user_data = get_user_data(user_id)
    markup = _create_menu_buttons(user_data)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)